  Этот документ содержит информацию о создании планировщиков для
системы Cleo.

  Планировщий Cleo представляет собой код на perl. Этот код не должен
содержать объявлений модулей (package) и обязан содержать объявление
переменной $cleo, содержащей число - номер версии планировщика.

  Главная процедура модуля - do_scedule. первый передаваемый ей
аргумент - ссылка на список задач. Каждая задача описывается полями:

    id         - идентификатор задачи
    user       - имя пользователя-владельца задачи
    np         - число запрошенных процессоров
    timelimit  - лимит работы задачи в секундах
    is_own     - 1, если задача принадлежит этой очереди, и 0, если это
                 задача из родительской очереди.
    blocked    - 1, если задача заблокирована, и 0, если нет.
    

  Второй аргумент - ичсло зарезервированных процессоров (для
пред-запущенных задач, которые ждут определения имён процессоров от
дочерних очередей).

  Остальные аргументы - имена свободных процессоров.

  Планировщик может опционально содержать определения следующих процедур:

  start        - вызывается при старте планировщика. Единственный
                 передаваемый ей аргумент - ссылка на hash с полями
                 'queue' (имя очереди) и 'version' (версия cleo).

  stop         - вызывается перед выгрузкой планировщика. Аргумент -
                 тот же, что и для start.

  event        - вызывается при наступлении события в системе (см. ниже)

  ВСЕ процедуры должны возвращать 0 в случае успешного выполнения, и 1
в случае ошибочного.

  Процедура do_scedule может вызывать предопределённые подпрограммы
для получения доп. информации или изменения состояния задач или
очереди. Суммарное время работы do_scedule не может превышать 5
секунд. В противном случае она будет аварийно завершена. После
нескольких аварийных завершений, планировщик может быть помечен как
сбойный и выключен.

  Ниже приведён полный список попрограмм, которые может использовать
планировщик для общения с Cleo:

  run ID [, PE_LIST]
    Запускает на счёт задачу с идентификатором ID. Кроме ID может быть
    передан список процессоров, на которых необходимо запустить
    задачу. В текущей версии этот список игнорируется, т.к. он заново
    генерируется модулями pe_select.

  block ID, REASON
    Блокирует задачу с идентификатором 'ID' и указанием причины
    блокировки 'REASON'.

  unblock ID, REASON
    Разблокирует задачу с идентификатором 'ID' и причиной блокировки
    'REASON'. Если указана причина 'Total', то снимаются все
    блокировки с данной задачи.

  move ID, ID_AFTER
    Помещает задачу с идентификатором ID в очередь после задачи с
    идентификатором ID_AFTER. Если ID_AFER равен -1, то задача
    помещается в начало очереди, если -2, то в конец.

  get_task_info ID, NAME
    Возврящает дополнительную информацию о задаче. NAME может
    принимать одно из следующих значений:
      task               - полное имя задачи с аргументами и
                           абсолютным путём
      args               - аргументы задачи
      added              - время постановки задачи в очередь (UNIX-time)
      timelimit          - лимит времени работы задачи в секундах
      priority           - приоритет
      np                 - число запрошенных процессоров
      user               - имя владельца задачи
      dir                - рабочий каталог
      pe_select          - имя модуля для выбора процессоров
      queue              - имя текущей очереди
      out                - имя файла вывода результатов (!)
      rep                - имя файла отчёта (!)
      owner              - имя очереди, которой принадлежит
                           оригинальная задача

      com_line           - строка запуска задачи (!)
      blocks             - список блокировок задачи (ссылка на список)
      group              - UNIX-группа, которая будет присвоена задаче
                           при старте
      env                - список переменных окружения (строка)
      temp_dir           - временный каталог
      occupy_full_node   - 1/0 занимать все процессоры на узлах или нет
      run_via_mons       - 1/0 производить запуск через агенты на
                           узлах или нет
      use_file           - имя файла, создаваемого при запуске
      one_rep            - 1/0 перезаписыать существующий отчёт или нет

      wait_cond_type     - a/o (and/or) тип условия на запуск
      wait_for_run       - список задач, которые должны быть запущены
                           до запуска этой
      wait_for_ok        - список задач, которые должны успешно
                           завершиться до запуска этой
      wait_for_fail      - список задач, которые должны неуспешно
                           завершиться до запуска этой

      file_mask          - маска для отслеживания задачи на узлах (perl-re)
      rsh_filter         - имя фильтра rsh (устарело)
      
      time               - время запуска задачи или время её
                           постановки в очередь.
      
    Знаком (!) отмечены параметры, которые могут содержать нераскрытые
псевдопеременные.


  set_task_info ID, NAME, NEW_VALUE
    Установить новое значение параметру задачи. Будьте КРАЙНЕ
ОСТОРОЖНЫ при её использовании. NAME может принимать те же значения,
что и в get_task_info.

  get_user_info USERNAME, NAME
    получает информацию о параметрах, ассоциированных с пользователем
системы. Параметр NAME может принимать следующие значения:

      add_pri_on_chld    - добавлять это число к приоритету задачи из
                           родительской очереди
      attach_mask        - аналогично get_task_info
      coll_nodes         - формировать файл, используя одну строку на узел
      def_priority       - приоритет по умолчанию
      def_queue          - очередь по умолчанию
      def_view_flags     - флаги для команды 'view'
      default_time       - лимит времени по умолчанию
      exec_line          - шаблон строки запуска
      exec_module        - имена модулей, выполняемых при старте и
                           завершениии задач
      exec_write         - строка, посылаемая на терминал пользователя
                           при старте задачи
      file_head          - шаблон заголовка в формируемом файле
      file_line          - шаблон строки в формируемом файле
      file_tail          - шаблон окончания в формируемом файле
      first_line         - шаблон первой строки в формируемом файле
      gid                - ЧИСЛОВОЙ идентификатор группы, назначаемой
                           задаче преде запуском
      kill_script        - команда, запускаемая по окончании задачи от
                           имени суперпользователя
      max_np             - максимальное число процессоров на задачу
      max_queue          - максимальное число задач в очереди
      max_sum_np         - максимальное число суммарно занимаемых
                           пользователем процессоров
      max_tasks          - максимальное число запущенных задач
      max_time           - максимальный лимит времени работы задачи
      min_np             - минимальное число процессоров на задачу
      occupy_full_node   - занимать все процессоры на узле
      one_report         - перезаписывать файл отчёта
      outfile            - шаблон имени файла результатов
      pe_select          - имя модуля ввбора процессоров
      post_exec          - скрипт для запуска после завершения задачи
      post_exec_write    - строка, посылаемая на терминал пользователя
                           по окончании задачи
      priority           - максммальный приоритет
      q_fail_exec        - шаблон строки для запуска от имени
                           супрепользователя при неуспешном завершении
                           задачи
      q_just_exec        - шаблон строки для запуска от имени
                           супрепользователя сразу после запуска задачи
      q_ok_exec          - шаблон строки для запуска от имени
                           супрепользователя при успешном завершении
                           задачи
      q_post_exec        - шаблон строки для запуска от имени
                           супрепользователя после запуска задачи
      q_pre_exec         - шаблон строки для запуска от имени
                           супрепользователя перед запуском задачи
      repfile            - шаблон имени файла отчёта
      rsh_filter         - имя rsh-фильтра (устарело)
      run_via_mons       - запускать задачу через агенты на узлах или нет
      temp_dir           - шаблон имени временного каталога
      use_file           - шаблон имени формируемого файла
      use_first_line     - использовать обособленную первуб строку в
                           формируемом файле
      user_conf_file     - имя пользователского файла конфигурации
                           (относительно домашнего каталога)
      user_fail_exec     - шаблон строки для запуска от имени
                           пользователя при неуспешном завершении
                           задачи
      user_just_exec     - шаблон строки для запуска от имени
                           пользователя сразу после запуска задачи
      user_kill_script   - команда, запускаемая по окончании задачи от
                           имени пользователя
      user_ok_exec       - шаблон строки для запуска от имени
                           пользователя при успешном завершении
                           задачи
      user_post_exec     - шаблон строки для запуска от имени
                           пользователя после запуска задачи
      user_pre_exec      - шаблон строки для запуска от имени
                           пользователя перед запуском задачи

  Можно также указать любой параметр, установленный ранее с помощью set_user_info.
     

  get_user_profile_info USERNAME, PROFILE, NAME
    Аналогична get_user_info, но с учётом профиля, указанного в PROFILE.

  set_user_info USERNAME, NAME, VAL
    Устанавливает значение параметров, ассоциированных с
    пользователем. Не может менять базовые параметры.

  get_pe_info PE, NAME
    Получает данные о процессоре с именем 'PE'. NAME может принимать
    следующие значения:

      blocked         - 1, если процессор заблокирован и 0, если нет
      blocked_reasons - ссылка на массив причин блокирововк
      ids             - ссылка на массив с идентификаторами запущенных
                        на этом процессоре задач
      own             - 1, если процессор не разделяется с дочерними
                        очередями и 0, если разделяется
      max             - максимальное число задач на процессор

  cleo_log MESG
    Записать сообщение MESG в фвйл журнала Cleo.

  list_running
    Возвращает ссылку на список всех запущенных задач. Формат задачи
    описан выше (get_task_info). Большинство полей-шаблонов имеют
    подставленные псевдопеременные. Дополнительно доступны следующие
    поля:
       extranodes  - список всех используемых, но не занятых
                     процессоров
       npextra     - число используемых, но не занятых процессоров


  list_queued

    Возвращает ссылку на список всех задач в очереди. Формат задачи
    описан выше (get_task_info). 

  list_future

    Возвращает HASH с описаниями плановых событий завершения
    задач. Ключи - идентификаторы задач. Каждый элемент - HASH с
    полями 'time' (время завершения - UNIX-time), 'np' - число
    процессоров, и 'user' - имя владельца.

  violates ID, [NOACT]

    Проверяет возможность запуска задачи. Возвращает 0, если нет
    никаких ограничений для запуска задачи. Если есть ограничения,
    мешающие запуску, возвращается 1. Если задача должна быть
    немедленно удалена из очереди, возвращается 2.
    Если опциональный параметр NOACT не указан или равен 0 (по
    умолчанию), то все действия, обусловленные ограничениями (такие
    как блокировка или удаление), немедленно выполняются самой
    системой. Если этот числовой параметр отличен от 0, то такие
    действия не выполняются и планировщик способен сам реализовывать
    подобные действия (отменяя штатную реакцию системы).
    
  get_mode
    Возвращает текущтй режим работы системы. Это число, полученное
    логическим "или" из нескольких флагов. Ниже представлены наиболее
    значимые:

      MODE_RUN_ALLOW    - 1, если очередь может запускать новые задачи
      MODE_QUEUE_ALLOW  - 1, если очередь может принимать новые задачи

    По умолчанию, задачи, полученные из родительской очереди,
    запускаются даже в режиме блокировки (MODE_RUN_ALLOW=0). Это
    поведение может быть отменено планировщиком (в этом случае
    необходимо отслеживать данный флаг и не допускать запуска любых задач).

  save_data NAME, VALUE
    Сохраняет данные в системном файле. Данные сохраняются после
    выгрузки планировщика и даже после завершения работы системы.
    NAME - ключ, VALUE - сами данные.

  get_data NAME
    Читает данные, сохранённые ранее процедурой save_data.

  get_settings USER, NAME1, ... NAMEN
    Читает настройки, указанные в файле конфигурации cleo.conf в
    секции [mod]. USER - имя пользователя, для которого должны быть
    указаны эти настройки. Если оно пустое или '*', то считывается
    значение по умолчанию. NAME1...NAMEN - имена параметров.
    В файле конфигурации настройки указываются так:

    Sceduler_name.Queue.User.Name = value
    
    где Sceduler_name - имя планировщика, User - имя пользователя
    (может быть '*', что означает значение по умолчанию), Queue - имя
    очереди (может быть '*', что означает для всех очередей) Name -
    имя параметра.
    "ABC.queue1.*.xyz" имеет бОльший приоритет, чем "ABC.*.user1.xyz"

  get_time
    Возвращает время вызова планировщика (UNIX-time)

  disturb_at TIME
    Запланировать событие 'alarm' (см. следующую секцию) в TIME
    (UNIX-time). Если TIME меньше текущего времени, событие никогда не
    наступит. Каждый вызов disturb_at отменяет действие предыдущего.

-------------------------------------------------------------------

  В планировщике могут быть опционально реализованы процедуры start,
stop и event. Процедура start вызывается после загрузки
планировщика, stop - перед его выгрузкой. Единственный передаваемый
им аргумент - ссылка на HASH с полями'queue' (имя очереди) и
'version' (версия cleo).
  Процедура event вызывается при нступлении одного из следующих
событий в системе:
    - запуск задачи
    - завершение задачи
    - изменение приоритета задачи
    - добавление задачи
    - удаление задачи (только для задач в очереди)
    - alarm

  Событие alarm генерируется только по запросу процедуры disturb_at.

  Аргументы, передаваемые процедуре event: имя события ('alarm',
  'finish', 'start', 'add', 'piority') и ссылка на HASH с полями,
  специфичными для кажного типа событий.

  Для события 'alarm' второй аргумент всегда равен undef.
  Для события 'finish' второй аргумент содержит поля:

      id        - идентификатор задачи
      user      - владелец задачи
      signal    - номер сигнала, по которому было завершено приложение
      status    - статус завершения задачи
      np        - число процессоров
      npextra   - число дополнительных процессоров
      special   - причина завершения задачи
      core      - 1, если был сгенерирован core-файл
      start     - время старта задачи (UNIX-time)
      worktime  - время работы задачи (секунды)
      timelimit - предельное время, до которого задача должна была завершиться
      timedout  - 1, если задача превысила предельное время работы
      nodes     - список узлов

  Для события 'start' второй аргумент содержит поля:

      id        - идентификатор задачи
      user      - владелец задачи
      np        - число процессоров
      npextra   - число дополнительных процессоров
      timelimit - предельное время, до которого задача должна завершиться
      nodes     - список узлов

  Для события 'add' второй аргумент содержит поля:

      id        - идентификатор задачи
      user      - владелец задачи
      np        - число процессоров
      timelimit - предельное время работы задачи в секундах
      is_own    - 1, если это не задача из родительской очереди

  Для события 'priority' второй аргумент содержит поля:

      id           - идентификатор задачи
      user         - владелец задачи
      np           - число процессоров
      timelimit    - предельное время работы задачи в секундах
      is_own       - 1, если это не задача из родительской очереди
      old_priority - старый приоритет
      new_priority - новый приоритет

  Для события 'delete' второй аргумент содержит поля:

      id        - идентификатор задачи
      user      - владелец задачи
      np        - число процессоров
      timelimit - предельное время работы задачи в секундах


  В файле example-sceduler приведён пример планировщика, который может
быть взят за основу. Также можно воспользоваться стандартным
планировщиком base_sceduler.

